//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

using Microsoft.Extensions.Options;
using System.Text.Json;
using System.Text;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using Microsoft.Extensions.Logging;
using fields.Entities.HttpServices.CVPartnerService.Configuration;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace fields.Entities.HttpServices.CVPartnerService.CvHttpClient {

  [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
  public partial class CvPartnerClient : IClient {

    private readonly ILogger<CvPartnerClient> _logger;
    private HttpClient _httpClient;
    private readonly HttpRequestUriConfigOption _httpRequestUriConfigOption;
    private readonly HttpRequestParametersConfigOption _httpRequestParametersConfigOption;

    private System.Lazy<JsonSerializerOptions> _settings;

    public CvPartnerClient(HttpClient httpClient, IOptionsMonitor<HttpRequestParametersConfigOption> httpRequestParametersConfigOption, IOptionsMonitor<HttpRequestUriConfigOption> httpRequestUriConfigOption, ILogger<CvPartnerClient> logger) {
      _httpClient = httpClient;
      _logger = logger;
      _httpRequestUriConfigOption = httpRequestUriConfigOption.CurrentValue;
      _httpRequestParametersConfigOption = httpRequestParametersConfigOption.CurrentValue;
      _settings = new System.Lazy<JsonSerializerOptions>(CreateSerializerSettings);
    }

    private JsonSerializerOptions CreateSerializerSettings() {
      var settings = new JsonSerializerOptions();
      UpdateJsonSerializerSettings(settings);
      return settings;
    }

    public string BaseUrl {
      get { return _httpRequestUriConfigOption.Uris["BaseAddress"].UriValue.Value; }
      set { BaseUrl = value; }
    }

    protected JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

    partial void UpdateJsonSerializerSettings(JsonSerializerOptions settings);

    partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
    partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
    partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

    /// <summary>
    /// GET users
    /// </summary>
    /// <returns>OK</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<SwaggerResponse<ICollection<Anonymous>>> UsersAsync() {
      return UsersAsync(CancellationToken.None);
    }

    // public virtual HttpRequestMessage SetStaticRequestMessage() {
    //   return new HttpRequestMessage {
    //     Method = new HttpMethod(_clientConfig.RequestLineConfig.Lines["RequestMethod"].Value)
    //   };
    // }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// GET users
    /// </summary>
    /// <returns>OK</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>

    public virtual async Task<SwaggerResponse<ICollection<Anonymous>>> UsersAsync(CancellationToken cancellationToken) {

      var urlBuilder_ = new StringBuilder();
      urlBuilder_.Append(_httpRequestUriConfigOption.Uris["GetUsersUrl"].UriValue.Value);

      var client_ = _httpClient;
      var disposeClient_ = false;
      try {
        using (var request_ = new HttpRequestMessage {
          Method = new HttpMethod(_httpRequestUriConfigOption.RequestMethod.Value)
        }) {
          // request_.Headers.Accept.Add(Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
          request_.Content = new StringContent("{\"offset\":" + _httpRequestParametersConfigOption.Parameters["Offset"].Value + ", \"limit\":" + _httpRequestParametersConfigOption.Parameters["Limit"].Value + "}", null, "application/json");
          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          _logger.LogInformation("UsersAsync: {} with offset: {} and limit: {}", url_, _httpRequestParametersConfigOption.Parameters["Offset"].Value, _httpRequestParametersConfigOption.Parameters["Limit"].Value);
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try {
            var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null) {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200) {
              _logger.LogInformation("Response UsersAsync: {response}", "OK");
              var objectResponse_ = await ReadObjectResponseAsync<ICollection<Anonymous>>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null) {
                _logger.LogError("ObjectResponse UsersAsync: {status}, {response} {headers}", status_, objectResponse_.Text, headers_);
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return new SwaggerResponse<ICollection<Anonymous>>(status_, headers_, objectResponse_.Object);
            }
            else {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally {
            if (disposeResponse_)
              _logger.LogError("DisposeClient UsersAsync (disposeResponse_): {disposeResponse_}", disposeResponse_);
            response_.Dispose();
          }
        }
      }
      finally {
        _logger.LogError("DisposeClient UsersAsync (disposeClient_): {disposeClient_}", disposeClient_);
        if (disposeClient_)
          client_.Dispose();
      }
    }

    /// <summary>
    /// GET {id_1}
    /// </summary>
    /// <returns>OK</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual Task<SwaggerResponse<Response>> CvsAsync(object id_0, object id_1) {
      return CvsAsync(id_0, id_1, CancellationToken.None);
    }

    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
    /// <summary>
    /// GET {id_1}
    /// </summary>
    /// <returns>OK</returns>
    /// <exception cref="ApiException">A server side error occurred.</exception>
    public virtual async Task<SwaggerResponse<Response>> CvsAsync(object id_0, object id_1, CancellationToken cancellationToken) {
      if (id_0 == null) {
        _logger.LogError("CvsAsync: user_id was null when running CvsAsync");
        throw new System.ArgumentNullException("id_0");
      }

      if (id_1 == null) {
        _logger.LogError("CvsAsync: cv_id was null when running CvsAsync");
        throw new System.ArgumentNullException("id_1");
      }

      var urlBuilder_ = new StringBuilder();
      urlBuilder_.Append(_httpRequestUriConfigOption.Uris["GetCvUrl"].UriValue.Value);
      urlBuilder_.Replace("{id_0}", System.Uri.EscapeDataString(ConvertToString(id_0, CultureInfo.InvariantCulture)));
      urlBuilder_.Replace("{id_1}", System.Uri.EscapeDataString(ConvertToString(id_1, CultureInfo.InvariantCulture)));

      var client_ = _httpClient;
      var disposeClient_ = false;
      try {
        using (var request_ = new HttpRequestMessage {
          Method = new HttpMethod(_httpRequestUriConfigOption.RequestMethod.Value)
        }) {
          PrepareRequest(client_, request_, urlBuilder_);

          var url_ = urlBuilder_.ToString();
          _logger.LogInformation("CvsAsync: {url}", url_);
          request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

          PrepareRequest(client_, request_, url_);

          var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
          var disposeResponse_ = true;
          try {
            var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
            if (response_.Content != null && response_.Content.Headers != null) {
              foreach (var item_ in response_.Content.Headers)
                headers_[item_.Key] = item_.Value;
            }

            ProcessResponse(client_, response_);

            var status_ = (int)response_.StatusCode;
            if (status_ == 200) {
              _logger.LogInformation("Response CvsAsync: {response}", "OK");
              var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_, cancellationToken).ConfigureAwait(false);
              if (objectResponse_.Object == null) {
                _logger.LogError("ObjectResponse CvsAsync: {status}, {response} {headers}", status_, objectResponse_.Text, headers_);
                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
              }
              return new SwaggerResponse<Response>(status_, headers_, objectResponse_.Object);
            }
            else {
              var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
              throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
            }
          }
          finally {
            if (disposeResponse_) {
              _logger.LogError("DisposeClient CvsAsync (disposeResponse_): {disposeResponse_}", disposeResponse_);
              response_.Dispose();
            }
          }
        }
      }
      finally {
        if (disposeClient_) {
          _logger.LogError("DisposeClient CvsAsync (disposeClient_): {disposeClient_}", disposeClient_);
          client_.Dispose();
        }
      }
    }

    protected struct ObjectResponseResult<T> {
      public ObjectResponseResult(T responseObject, string responseText) {
        this.Object = responseObject;
        this.Text = responseText;
      }

      public T Object { get; }

      public string Text { get; }
    }

    public bool ReadResponseAsString { get; set; } = true;

    protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(HttpResponseMessage response, IReadOnlyDictionary<string, IEnumerable<string>> headers, CancellationToken cancellationToken) {
      if (response == null || response.Content == null) {
        return new ObjectResponseResult<T>(default(T), string.Empty);
      }

      if (ReadResponseAsString) {
        _logger.LogInformation("ReadObjectResponseAsync: ReadresponseAsString: {response}", ReadResponseAsString);
        _logger.LogInformation("Reading response string as {type}", typeof(T).FullName);
        var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);

        try {
          var typedBody = JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
          return new ObjectResponseResult<T>(typedBody, responseText);
        }
        catch (JsonException exception) {
          var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
        }
      }
      else {
        _logger.LogInformation("ReadObjectResponseAsync: ReadresponseAsString: {response}", ReadResponseAsString);
        _logger.LogInformation("Reading response stream as {type}", typeof(T).FullName);
        try {
          using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false)) {
            var typedBody = await JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
            return new ObjectResponseResult<T>(typedBody, string.Empty);
          }
        }
        catch (JsonException exception) {
          var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
          throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
        }
      }
    }

    private string ConvertToString(object value, CultureInfo cultureInfo) {
      if (value == null) {
        return "";
      }

      if (value is Enum) {
        var name = Enum.GetName(value.GetType(), value);
        if (name != null) {
          var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
          if (field != null) {
            var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(EnumMemberAttribute))
                as EnumMemberAttribute;
            if (attribute != null) {
              return attribute.Value != null ? attribute.Value : name;
            }
          }

          var converted = Convert.ToString(Convert.ChangeType(value, Enum.GetUnderlyingType(value.GetType()), cultureInfo));
          return converted == null ? string.Empty : converted;
        }
      }
      else if (value is bool) {
        return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
      }
      else if (value is byte[]) {
        return Convert.ToBase64String((byte[])value);
      }
      else if (value.GetType().IsArray) {
        var array = Enumerable.OfType<object>((System.Array)value);
        return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
      }

      var result = Convert.ToString(value, cultureInfo);
      return result == null ? "" : result;
    }
  }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603
